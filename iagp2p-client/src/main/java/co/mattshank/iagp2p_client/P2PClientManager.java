package co.mattshank.iagp2p_client;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.UnknownHostException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import co.mattshank.iagp2p_client.objects.P2PProperties;
import co.mattshank.iagp2p_client.objects.P2PTorrent;

public class P2PClientManager {

	private static boolean runInfinitely = true;
	
	public static void main(String[] args) throws NoSuchAlgorithmException, IOException, InterruptedException {
		Properties properties;
		String configPath = "";
		P2PTorrentBuilder torrentBuilder;
		HashMap<String, P2PClient> sharingClients = new HashMap<String, P2PClient>();
		
		configPath = args.length > 0 ? args[0] : "src/main/resources/client.properties";
		
		// Gather properties to use for duration of execution
		List<String> requiredProperties = new ArrayList<String>();
		// Define list of required properties
		requiredProperties.add("home_agency_id");
		requiredProperties.add("listen_interface");
		requiredProperties.add("torrent_incoming_directory");
		requiredProperties.add("incoming_file_output_directory");
		requiredProperties.add("torrent_outgoing_directory");
		requiredProperties.add("tracker_ip");
		requiredProperties.add("tracker_port");
		requiredProperties.add("torrent_distributor_ip");
		requiredProperties.add("torrent_distributor_port");
		requiredProperties.add("torrent_sharing_directory");
		
		// Configurable properties from config.properties
		properties = P2PProperties.loadProperties(configPath, requiredProperties);
		
		if(properties == null) {
			System.err.println("All required properties must be defined in client.properties:");
			for (String s : requiredProperties) {
				if (s != null)
					System.err.println("- " + s);
			}
			System.exit(1);
		}
		
		// Start a separate thread to build new torrents for any outgoing files generated by the home CSC
		torrentBuilder = new P2PTorrentBuilder(properties);
		torrentBuilder.start();
		
		do {
			// Download and share files
			sharingClients = downloadAndSeedFiles(properties, sharingClients);
			for(String key : sharingClients.keySet()) {
				System.out.println("Sharing " + sharingClients.get(key).getTorrent().getTorrentFile().getName() + " " + sharingClients.get(key).getTorrent().getDataFile().getName());
				//System.out.println(key + ": " + sharingClients.get(key).getStatus());
			}
			
			Thread.sleep(5000);
		} while(runInfinitely);
	}
	
	private static HashMap<String, P2PClient> downloadAndSeedFiles(Properties properties, HashMap<String, P2PClient> sharingClients) {
		HashMap<String, P2PClient> newSharingClients = new HashMap<String, P2PClient>(sharingClients);
		File[] listOfFiles;
		P2PTorrent torrentTemp;
		
		// Home files outgoing
		listOfFiles = new File(
				properties.getProperty("torrent_outgoing_directory")).listFiles(
						new FilenameFilter() {
							public boolean accept(File dir, String name) {
								boolean temp = false;
								if (name.toLowerCase().endsWith(".torrent"))
									temp = true;
								return temp;
							}
						});
		for(File f : listOfFiles) {
			if(!newSharingClients.containsKey(f.getName())) {
				try {
					// Initialize new torrent object to provide to the torrent sender and client
					torrentTemp = new P2PTorrent(properties, f);
					
					// Share the new torrent with the tracker
					new P2PTorrentSender(properties, torrentTemp).start();
					
					// Begin sharing the file with the swarm
					newSharingClients.put(f.getName(), new P2PClient(properties, torrentTemp));
					newSharingClients.get(f.getName()).shareFile();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		// Downloaded away files outgoing
		listOfFiles = new File(
				properties.getProperty("torrent_incoming_directory")).listFiles(
						new FilenameFilter() {
							public boolean accept(File dir, String name) {
								boolean temp = false;
								if (name.toLowerCase().endsWith(".torrent"))
									temp = true;
								return temp;
							}
						});
		for(File f : listOfFiles) {
			if(!newSharingClients.containsKey(f.getName())) {
				try {
					// Initialize new torrent object to provide to the torrent sender and client
					torrentTemp = new P2PTorrent(properties, f);
					
					// Begin downloading and sharing the file with the swarm
					newSharingClients.put(f.getName(), new P2PClient(properties, torrentTemp));
					newSharingClients.get(f.getName()).shareFile();
				} catch (UnknownHostException e) {
					e.printStackTrace();
				}
			}
		}
		
		return newSharingClients;
	}

}
